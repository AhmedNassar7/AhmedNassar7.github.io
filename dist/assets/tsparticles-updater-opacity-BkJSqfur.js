import{c as m,W as u,D as v,I as f}from"./tsparticles-engine-B56Pkamw.js";class x{constructor(e){this.container=e}init(e){const i=e.options.opacity;e.opacity=u(i,1);const t=i.animation;t.enable&&(e.opacity.velocity=v(t.speed)/100*this.container.retina.reduceFactor,t.sync||(e.opacity.velocity*=f()))}isEnabled(e){return!e.destroyed&&!e.spawning&&!!e.opacity&&e.opacity.enable&&((e.opacity.maxLoops??0)<=0||(e.opacity.maxLoops??0)>0&&(e.opacity.loops??0)<(e.opacity.maxLoops??0))}reset(e){e.opacity&&(e.opacity.time=0,e.opacity.loops=0)}update(e,i){this.isEnabled(e)&&function(t,a){const o=t.opacity;if(t.destroyed||!(o!=null&&o.enable)||(o.maxLoops??0)>0&&(o.loops??0)>(o.maxLoops??0))return;const s=o.min,c=o.max,l=o.decay??1;if(o.time||(o.time=0),(o.delayTime??0)>0&&o.time<(o.delayTime??0)&&(o.time+=a.value),!((o.delayTime??0)>0&&o.time<(o.delayTime??0))){switch(o.status){case"increasing":o.value>=c?(o.status="decreasing",o.loops||(o.loops=0),o.loops++):o.value+=(o.velocity??0)*a.factor;break;case"decreasing":o.value<=s?(o.status="increasing",o.loops||(o.loops=0),o.loops++):o.value-=(o.velocity??0)*a.factor}o.velocity&&o.decay!==1&&(o.velocity*=l),function(n,y,r,d){switch(n.options.opacity.animation.destroy){case"max":y>=d&&n.destroy();break;case"min":y<=r&&n.destroy()}}(t,o.value,s,c),t.destroyed||(o.value=m(o.value,s,c))}}(e,i)}}async function g(p,e=!0){await p.addParticleUpdater("opacity",i=>new x(i),e)}export{g as l};
